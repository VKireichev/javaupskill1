package ws.echo;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 */
@WebServiceClient(name = "EchoService", targetNamespace = "http://echo.ws/", wsdlLocation = "file:/D:/Workspace/Education/In-Progress/WebServices/Lab/Solutions/lab-07/src/main/resources/echo.wsdl")
public class EchoService
        extends Service {

    private static final URL WSDL_LOCATION;
    private static final Logger logger = Logger.getLogger(EchoService.class.getName());
    private static final String NAMESPACE = "http://echo.ws/";
    private static final String ECHO_PORT_LOCAL_PART = "EchoPort";

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = ws.echo.EchoService.class.getResource(".");
            url = new URL(baseUrl, "file:/D:/Workspace/Education/In-Progress/WebServices/Lab/Solutions/lab-08/src/main/resources/echo.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'file:/D:/Workspace/Education/In-Progress/WebServices/Lab/Solutions/lab-08/src/main/resources/echo.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        WSDL_LOCATION = url;
    }

    public EchoService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EchoService() {
        super(WSDL_LOCATION, new QName(NAMESPACE, "EchoService"));
    }

    /**
     * @return returns Echo
     */
    @WebEndpoint(name = ECHO_PORT_LOCAL_PART)
    public Echo getEchoPort() {
        return super.getPort(new QName(NAMESPACE, ECHO_PORT_LOCAL_PART), Echo.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns Echo
     */
    @WebEndpoint(name = ECHO_PORT_LOCAL_PART)
    public Echo getEchoPort(WebServiceFeature... features) {
        return super.getPort(new QName(NAMESPACE, ECHO_PORT_LOCAL_PART), Echo.class, features);
    }

}
